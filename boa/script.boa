p: Project = input;
Annotations: output sum[string][string] of int;
Repositories: output sum[string] of int;

cur_time: string;
startYear: time;
endYear: time;

isAnnotaded := false;

getQuarterOfYear := function(month: int) : int {
	# return (month + 2) / 3;
	# Since there is no integer division available, we need to use a dirty way!
	if (month == 1 || month == 2 || month == 3) 
		return 1;
	else if (month == 4 || month == 5 || month == 6)
		return 2;
	else if (month == 7 || month == 8 || month == 9) 
		return 3;
	return 4;
};

visit(input, visitor {
	before node: CodeRepository -> {
		if (len(node.revisions) > 0) {
			startYear = addmonth(trunctoyear(node.revisions[0].commit_date), 3); 			# Add three month to startYear, so that the first snapshot is of March of the startYear
			endYear = addmonth(node.revisions[len(node.revisions) - 1].commit_date, 3); 	# Add three month so that last Revision is definetly processed

			for (; startYear < endYear;) {
				cur_time = ""+string(yearof(startYear))+"/Q"+string(getQuarterOfYear(monthof(startYear)));
				snapshot := getsnapshot(node, startYear);
				foreach (i: int; def(snapshot[i])) {
					visit(snapshot[i]);
				}
				startYear = addmonth(startYear, 3);
			}

			if (isAnnotaded) {
				Repositories[cur_time] << 1;
				isAnnotaded = false;
			}	
		}
		stop;
	}
    before node: Modifier -> {
 		if (node.kind == ModifierKind.ANNOTATION) {
 			isAnnotaded = true;
 			Annotations[node.annotation_name][cur_time] << 1;
 		}
	}
 });